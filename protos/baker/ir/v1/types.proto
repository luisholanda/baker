syntax = "proto3";

package baker.ir.v1;

// A path to a identifier.
//
// The structure is complex due to qualifier necessities in Rust, the
// is that, in the path `<A<...> as foo::Bar>::Item`, the path is
// `foo::Bar::Item`, while `A<...>` is the qualifier.
message IdentifierPath {
  // A segment in the path.
  message Segment {
    // The name in the segment.
    string name = 1;
    // Any generics in this segment.
    repeated Type generics = 2;

    // Any lifetimes in this segment.
    repeated string lifetimes = 6;
  }

  enum Scope {
    // Conventional default.
    UNKNOWN = 0;
    // The identifier is a global identifier.
    GLOBAL = 1;
    // Package.
    //
    // The identifier starts with the package name.
    PACKAGE = 2;
  }

  // All segments in this path.
  repeated Segment segments = 1;
  // Qualifier of this path.
  optional Type qualifier = 2;
  // Scope of the path.
  Scope scope = 3;
}

// A type instance in the IR.
message Type {
  // Fundamental types of the language.
  //
  // These commonly have special type syntax in concrete languages.
  enum Fundamental {
    // Not set.
    UNKNOWN = 0;
    // A tuple type.
    TUPLE = 1;
    // A vector type.
    VEC = 2;
    // A map type.
    MAP = 3;
    // A shared reference type.
    SHRD_REF = 4;
    // A unique reference type.
    UNIQ_REF = 5;
    // A constant pointer type.
    CONST_PTR = 6;
    // A common pointer type.
    PTR = 7;
    // Double point precision.
    DOUBLE = 8;
    // Single point precision.
    FLOAT = 9;
    // Signed int.
    S_INT = 10;
    // Signed long.
    S_LONG = 11;
    // Unsigned int.
    U_INT = 12;
    // Unsigned long.
    U_LONG = 13;
    // Bool.
    BOOL = 14;
    // String.
    STRING = 15;
    // Bytes.
    BYTES = 16;
    // Optional types.
    OPTIONAL = 17;
    // Self type.
    SELF = 18;
    // Slice type.
    SLICE = 19;
    // A interface called via dynamic dispatch.
    DYNAMIC = 20;
    // Unit type.
    UNIT = 21;
  }

  oneof name {
    // Path of the type. Should not be set if `fundamental` is set.
    IdentifierPath identifier = 1;

    // The instance refers to a fundamental type.
    Fundamental fundamental = 2;
  };


  // TODO: can we remove these?

  // Any generic parameters associated with this type.
  repeated Type generics = 3;

  // All lifetime parameters with this type.
  repeated string lifetimes = 10;
}
