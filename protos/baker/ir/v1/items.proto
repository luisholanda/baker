syntax = "proto3";

package baker.ir.v1;

import "baker/ir/v1/statement.proto";
import "baker/ir/v1/types.proto";
import "baker/ir/v1/values.proto";

// A type definition in the IR.
message TypeDef {
  // Record type definition.
  message Record {
    // A property inside a record.
    message Property {
      // The type of the property.
      Type type = 1;

      // The visibility of the property.
      Visibility visibility = 2;

      // All attributes of the property.
      //
      // What this field means depends on the generated language, e.g.:
      //   - In Rust, these should be added as attributes;
      //   - In Python, Java, or JavaScript, these should be added as decorators;
      //   - In Go, these can be added as metadata.
      repeated Attribute attributes = 3;

      // Documentation of this property.
      string documentation = 4;
    }

    // All properties in the record.
    map<string, Property> properties = 1;
  }

  // A sum type definition.
  message Sum {
    // A member of a sum type.
    message Member {
      // The value of the member.
      oneof value {
        // A C-like value.
        int32 fixed = 1;
        // A record value.
        TypeDef.Record record = 2;
        // A type reference.
        Type type = 3;
      };

      // Attributes of this member.
      repeated Attribute attributes = 5;

      // Documentation of this member.
      string documentation = 6;
    }

    // Members of the sum type.
    map<string, Member> members = 1;
  }

  // A set of implementations for a type.
  //
  // This can be used to add methods to it, or to add an interface
  // implementation.
  message ImplBlock {
    // The interface implemented by this block.
    optional Type interface = 1;

    // All methods defined in this block.
    repeated Function methods = 2;

    // All associated types needed for an interface implementation.
    //
    // This should not be set if `inferface` isn't set.
    repeated TypeAlias assoc_types = 3;

    // Generics defined in this block.
    repeated Type generics = 4;

    // Lifetimes defined in this block.
    repeated string lifetimes = 5;

    // Type constraints in this block.
    repeated Constraint constraints = 6;

    // Constants defined in this block.
    repeated Constant constants = 7;
  }

  // Constraints in a specific type.
  message Constraint {
    // The type that is constrained.
    Type constrained = 1;
    // The interfaces in this constraint.
    repeated Type interfaces = 2;
    // Lifetime constraints.
    repeated string lifetimes = 3;
  }

  // The type header.
  Type header = 1;

  // The type definition itself.
  oneof definition {
    // The type is a record (e.g. struct, data, class, etc.).
    Record record = 2;

    // The type is a sum type (C-like enums, Haskell-like enums, etc.).
    Sum sum = 3;
  };

  // All attributes in the type definition.
  repeated Attribute attributes = 5;

  // All implementation blocks for this type.
  repeated ImplBlock blocks = 6;

  // Documentation of the type.
  string documentation = 7;

  // Visibility of the type.
  Visibility visibility = 8;

  // Extra definitions, possibibly in another types that are associated
  // with this definition.
  //
  // This field will only be set by layers, codegens will not receive
  // any value here, as they're merged into the correct namespace by baker.
  Namespace associated_namespace = 9;
}

// A type alias.
message TypeAlias {
  // The alias type.
  Type alias = 1;

  // The aliased type.
  Type aliased = 2;

  // The alias visibility.
  Visibility visibility = 4;

  // The alias documentation.
  string documentation = 5;

  // Alias attributes.
  repeated Attribute attributes = 7;
}

// A function definition.
message Function {
  // Argument of a function.
  message Argument {
    // Argument type.
    enum ArgType {
      // The argument is positional.
      POSITIONAL = 0;
    }

    // Name of the argument.
    string name = 1;
    // Argument type.
    ArgType arg_type = 2;
    // Type of the argument.
    Type type = 3;
  }

  // The function header.
  Type header = 1;

  // The return type.
  Type return = 2;

  // Function visibility.
  Visibility visibility = 3;

  // Function implementation.
  Block implementation = 4;

  // The receiver of the method.
  //
  // If not set, this is a static function.
  optional Type receiver = 5;

  // Function documentation.
  string documentation = 6;

  // Arguments of the function.
  repeated Argument arguments = 7;

  // Attributes in this function.
  repeated Attribute attributes = 8;

  // Is this function an async function?
  bool asyncness = 9;

  // Constraints in this function.
  repeated TypeDef.Constraint constraints = 10;
}

// An interface definition.
message Interface {
  // Bounds added to a type.
  message Bounds {
    // Interfaces in the bound.
    repeated Type interfaces = 2;
    // Lifetimes in the bound.
    repeated string lifetimes = 3;
  }

  // An associated type in this interface.
  message AssocType {
    // The header of the assoc. type.
    Type header = 1;
    // Bounds in this assoc. type.
    optional Bounds bounds = 2;
  }

  // Interface header.
  Type header = 1;

  // Methods in the interface.
  repeated Function methods = 2;

  // Associated types in this interface.
  repeated AssocType assoc_types = 3;

  // Interface documentation.
  string documentation = 4;

  // TODO(impls): handle constants
}

// An attribute added to some item in the code.
message Attribute {
  // Value of the attribute.
  oneof value {
    // A function call attribute.
    //
    // E.g. `#[serde(rename_all = "camelCase")]`.
    FunctionCall call = 1;
    // An assignment attribute.
    //
    // E.g. `#[table_name = "foo"]`
    Statement.Assignment assignment = 2;
    // An identifier attribute.
    //
    // E.g. `#[tracing::instrument]`.
    IdentifierPath identifier = 3;
  };
}

// An import declaration.
message Import {
  // From where we're importing
  IdentifierPath module = 1;
  // What we're importing
  //
  // If empty, and glob is true, then we're importing every name
  // to the scope. If glob is false, we're doing an absolute import
  repeated IdentifierPath things = 2;
  // Are we importing everything?
  bool glob = 3;
  // A name to use when refering to the imported module.
  optional string alias = 4;
}

// A constant value.
message Constant {
  // The name of the constant.
  string name = 1;
  // The type of the constant.
  Type type = 2;
  // The value of the constant.
  Value value = 3;
  // Attributes associated with the constant.
  repeated Attribute attributes = 4;
  // Documentation associated with the constant.
  optional string documentation = 5;

  Visibility visibility = 6;
}

message Namespace {
  // All generated types.
  repeated TypeDef types = 2;
  // All generated aliases.
  repeated TypeAlias aliases = 3;
  // All generated interfaces.
  repeated Interface interfaces = 4;
  // Free-standing functions.
  repeated Function functions = 5;

  // Nested namespaces declared inside this namespace.
  map<string, Namespace> nested_namespaces = 6;

  // Imports in this namespace.
  repeated Import imports = 7;

  // Constants in this namespace.
  repeated Constant constants = 8;
}

// Possible visibility levels.
enum Visibility {
  UNKNOWN = 0;
  PRIVATE = 1;
  PROTECTED = 2;
  PACKAGE = 3;
  PUBLIC = 4;
}
